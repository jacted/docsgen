// Code generated by go-bindata.
// sources:
// themes/default/index.html
// themes/default/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _themesDefaultIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x93\xb1\x6e\xf2\x30\x10\xc7\x77\x9e\xe2\xe4\x8f\xf1\x6b\x2c\x06\x96\xca\xf1\x42\x11\x1d\xaa\x76\xa0\x7d\x00\x13\x1f\xc4\x8a\x49\x90\xed\xa0\x46\x51\xde\xbd\x72\xec\x36\x18\x15\xba\xc5\x77\x7f\xff\xee\xee\x7f\x0e\x2b\xdd\x51\xf3\x19\x00\x2b\x51\x48\xff\x01\xc0\x9c\x72\x1a\xf9\xd3\xdb\x6a\xbb\x59\xbf\x32\x1a\x8e\x21\xa5\x55\x5d\x81\x41\x9d\x13\xeb\x3a\x8d\xb6\x44\x74\x04\x4a\x83\xfb\x18\xc9\x0a\x6b\x09\xd0\x11\x49\xbf\x99\x6c\xd7\xc8\x8e\xcf\x02\x42\xaa\x33\x28\x99\x13\xab\x24\xee\x84\x21\x81\x0c\xd0\xf7\x60\x44\x7d\x40\x98\x57\xd8\xfd\x87\xf9\x59\xe8\x16\xe1\x31\x87\x6c\x63\x9a\xf6\x64\x61\x18\xa2\xd2\x77\xbb\xe4\x7d\x1f\x35\xd9\xbb\x6f\x10\x86\x81\xd1\x72\xc9\x27\x4d\xab\xa7\x43\x82\xf7\x70\x0f\x8e\xd7\x3f\x8c\x4e\xe0\xe3\x98\x9c\x89\x38\xd6\xbf\xb1\x50\xf6\x6c\x70\x0f\xc3\x40\x42\xdd\x8b\x9a\x82\x33\xaa\xd5\x55\x29\xac\x65\xd2\x2f\x9d\x9a\x49\xb3\x8c\x4a\x75\xbe\xb6\x66\x27\x8a\xea\x60\x9a\xb6\x96\x3f\xee\x8c\xb9\x42\x0b\x6b\x73\x22\x85\xa9\x08\x8f\x37\x6f\x42\x8a\xa6\x76\x58\x3b\x12\xe3\xf7\x0c\xde\x62\xe1\x54\x53\xa7\x16\xdb\x10\x1c\x59\x93\xd7\x2f\xfe\x01\x78\x1b\x2e\xed\xba\xe8\xed\x88\xae\x6c\xe4\x43\xd1\x9c\xba\x44\xe3\x77\xb6\xf8\x7d\x67\x8b\x54\x37\x69\x56\x61\x82\xab\xdd\x4c\x63\xdf\xac\x8e\x9f\xe2\x78\xd2\x48\x6e\x81\xd7\x21\x7f\x17\xcc\x68\x34\xe0\xaf\xbd\x31\x1a\x5e\x37\xa3\xe3\xbf\xf4\x15\x00\x00\xff\xff\xd8\xd4\x9e\x67\x52\x03\x00\x00")

func themesDefaultIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_themesDefaultIndexHtml,
		"themes/default/index.html",
	)
}

func themesDefaultIndexHtml() (*asset, error) {
	bytes, err := themesDefaultIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "themes/default/index.html", size: 850, mode: os.FileMode(420), modTime: time.Unix(1482857658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _themesDefaultStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xcb\x6e\xec\x36\x0c\xdd\xfb\x2b\x08\x04\xdd\x04\x76\xe2\xf1\x23\x0f\x65\xd5\x76\xd3\x7d\xbf\x40\x96\xe4\xb1\x10\x59\x12\x24\x4d\xc6\x93\x62\xfe\xbd\xb0\xfc\x18\xf9\x71\x6f\x13\xa0\x37\x59\x8c\x4d\x8b\xe4\xe1\xe1\x11\xd9\xb8\x56\xc4\x50\x29\x7a\x81\x7f\x22\x80\x16\x9b\x23\x97\x08\xd2\xb7\x08\x40\x63\x4a\xb9\x3c\xfa\xb7\x6b\x14\xcd\x87\x6a\x25\x5d\x62\xf9\x27\x43\x70\x28\x74\xf7\x36\x99\x6a\xdc\x72\x71\x41\xf0\x17\x13\x1f\xcc\x71\x82\x63\xf8\xdd\x70\x2c\x62\xb0\x58\xda\xc4\x32\xc3\x6b\x1f\x09\xfb\x30\x44\x09\x65\x10\xdc\xa5\xe9\xeb\x2b\x2b\xfb\x28\x8e\x75\x2e\xa1\x8c\x28\x83\x1d\x57\x12\x81\x54\x92\x79\x0f\x1d\xa0\x4b\x2a\xe5\x9c\x6a\x47\x90\xa3\xcd\x29\x8d\x20\x4b\x7b\x34\xd7\x28\x6a\x0e\x31\x34\x59\x0c\x4d\x1e\x43\x53\xc4\xd0\x94\x31\x34\x4f\xeb\x0a\xfb\x83\xf9\xad\xa2\x33\xe3\xc7\xc6\x21\x28\xd3\xf4\x6d\x55\xe5\xd3\x50\xa5\xe0\x92\x25\xcd\x78\x2c\xcb\xa6\x64\x3e\xc1\x86\x99\x2c\x60\x66\x15\x7a\x11\xe7\xf0\x32\x1c\xf4\xc5\x3b\x83\xa5\xad\x95\x69\x11\x9c\xb4\x66\x86\x60\x3b\x10\x10\x3d\xde\xc3\xdf\x9c\xb2\x0a\x9b\xe8\xfe\xab\x7f\x8f\xd1\x9d\x1d\x7c\x3c\x3a\xad\x2c\x1f\x78\xc5\x95\x55\xe2\xe4\x58\x9f\x77\xc1\xa6\x60\xb5\x1b\x1f\x3d\xa3\xfe\xe9\x33\xe1\x92\xb2\x0e\xc1\xb3\xef\xd2\x99\x53\xd7\x20\xc8\x5e\xd2\x01\x78\x85\xc9\xfb\xd1\xa8\x93\xa4\x08\xee\x6a\x5c\x93\x9a\x0c\x71\x0d\x65\x26\x31\x63\x95\xba\x03\xab\x04\xa7\x70\x57\xa7\x75\x51\x3f\xf7\x55\xcd\xe8\x46\xfa\x26\x45\xbc\xe6\xaf\x14\xe7\x4b\x09\xfa\xe6\x42\x31\x70\x1e\x38\xa2\x9a\x1b\xeb\x12\xd2\x70\x41\x87\x2a\x07\x97\xa5\x22\x66\x87\x93\xf8\x99\xce\xfb\x34\xbb\xbd\x4e\x27\xa3\x75\x89\x75\x17\xc1\x6e\xda\x0c\x43\x0b\x0e\x83\xb6\xd7\xcd\x24\x58\x73\x87\x05\xff\xf4\x94\x53\x6e\xb5\xc0\x17\x04\x95\x50\xe4\x7d\x01\xe1\x49\x77\x73\xb6\x89\x8e\x82\x94\x65\x89\x3d\xf5\x0d\x77\x2c\xb1\x1a\x13\x0f\xe0\x6c\xb0\xee\xcd\xea\x83\x99\x5a\xa8\x33\x82\x86\x53\xca\xe4\x2c\xa7\xdb\x07\x26\x04\xd7\x96\xdb\x3d\xc4\xa8\xe9\xcf\xdd\x70\x87\x37\xf0\x24\x29\x33\x3d\x17\x5e\x85\x8f\xf7\xf0\xc7\xdc\xed\x6f\xe9\xf0\x26\x92\x95\x14\x6b\xde\x31\xba\xd1\xe1\xa8\x9a\x95\x10\x07\x75\x66\x2f\x87\x81\x9f\x59\x97\x07\x5f\x55\x90\xe2\x81\x62\xf3\xfe\x3d\xcd\x97\xe9\x6f\x3f\x4e\xbc\x90\x78\x46\xf3\x43\x5e\x4c\x7c\xfc\xa9\xa4\x63\xd2\x7d\x8b\x0c\x32\xf8\xfc\x02\x26\xb2\x50\x0e\xc9\x05\x81\x25\x46\x09\xe1\xf9\x99\xb2\x36\x87\xed\xcc\x2b\x36\x33\x2f\x2b\x76\xee\x41\x9e\xed\xcf\xaa\x50\xde\xd7\xe8\x96\xca\x32\xd2\xd7\xb6\x2a\xd4\x30\x81\x1d\xff\x60\x5b\xe4\xdb\x8b\xb1\x95\xf6\x75\x1b\xfe\xa1\x65\xae\x51\x34\x21\x4a\x5f\xc2\x19\x80\x20\x1f\xaf\x52\x2d\x14\x76\xc8\xd3\x16\x8c\xb0\xb1\xe7\x95\xea\xfa\xa2\xbd\xc3\x38\xb5\x2a\xd5\x05\x33\xcc\xf3\xbe\x3f\xc1\x7e\x04\x85\x75\xb8\xd5\x82\xfd\xaf\x68\xa6\x79\x40\x53\x5a\xd0\xe7\x9f\xe0\xcb\xf3\xfc\x25\xaf\x76\x5b\xb1\x18\x97\x21\x6f\xf1\xd7\x8e\x86\x75\x85\xd9\xa7\xcd\xfb\x9f\x84\x68\xb3\x22\x65\x98\xeb\x7b\xbb\x24\x7b\xce\xaa\x8c\x86\xbb\x04\x53\x7e\xb2\x08\xca\x60\xb5\x8e\xdb\x36\xdf\x51\xeb\xe1\xa1\xdc\xdf\xc0\x5f\xc4\xb9\xa5\x64\x73\x8a\x28\xca\x16\xab\x8b\xa6\xfd\xff\xa0\x65\x33\xf2\x08\xc2\x99\xf9\xd6\x60\xc1\x8f\x32\xe8\x7d\x38\xd1\xb5\x61\xc9\x34\xd3\xcf\xca\xd0\xa4\x32\x0c\xbf\x23\xf0\x3f\x49\x6f\x99\xbf\xf4\x1e\x9e\x3e\xa9\x4c\x8b\x45\x6f\x4f\x5a\xf5\x99\x38\x5c\x8d\x94\x14\xde\xa6\xd6\x96\xc5\xeb\xf5\xdf\x00\x00\x00\xff\xff\x38\x2e\x44\x14\xff\x09\x00\x00")

func themesDefaultStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_themesDefaultStyleCss,
		"themes/default/style.css",
	)
}

func themesDefaultStyleCss() (*asset, error) {
	bytes, err := themesDefaultStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "themes/default/style.css", size: 2559, mode: os.FileMode(420), modTime: time.Unix(1482858421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"themes/default/index.html": themesDefaultIndexHtml,
	"themes/default/style.css": themesDefaultStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"themes": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{themesDefaultIndexHtml, map[string]*bintree{}},
			"style.css": &bintree{themesDefaultStyleCss, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

