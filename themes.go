// Code generated by go-bindata.
// sources:
// themes/default/index.html
// themes/default/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _themesDefaultIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x93\xc1\x6e\xe3\x20\x10\x86\xef\x79\x8a\x11\x9b\xe3\xae\x51\x0e\xb9\xac\x30\x97\xb4\x6a\x0f\x95\x7a\x48\xfb\x00\xc4\x4c\x62\x64\x62\x22\xc0\x51\x2d\xcb\xef\x5e\x61\x68\x1d\xa2\x26\xbd\xe1\x99\x9f\x6f\x66\xfe\xc1\xac\xf6\x47\xcd\x17\x00\xac\x46\x21\xc3\x01\x80\x79\xe5\x35\xf2\x87\xd7\xcd\x96\xd1\x78\x8e\x71\xad\xda\x06\x2c\xea\x92\x38\xdf\x6b\x74\x35\xa2\x27\x50\x5b\xdc\xa7\x48\x51\x39\x47\x80\x4e\x3c\xfa\x05\x64\x3b\x23\xfb\x48\x88\x18\xa9\xce\xa0\x64\x49\x9c\x92\xb8\x13\x96\xc4\x1c\xc0\x30\x80\x15\xed\x01\x61\xd9\x60\xff\x17\x96\x67\xa1\x3b\x84\xff\x25\x14\x4f\xd6\x74\x27\x07\xe3\x98\x94\xa1\xdd\x35\x1f\x86\xa4\x29\xde\x42\x93\x30\x8e\x8c\xd6\x6b\x3e\x6b\x3a\x3d\x7f\x64\xf8\x00\x0f\xe0\x74\xfd\xdd\xea\x0c\x3e\x8d\xca\x99\x48\xa3\xfd\x99\x0a\x15\xcf\x16\xf7\x30\x8e\x24\xd6\xbd\xa8\x29\x38\xa3\x5a\x5d\x95\xc2\x56\x66\xfd\xd2\xb9\x99\x3c\xcb\xa8\x54\x67\xbe\xc8\xad\xd9\x89\xaa\x39\x58\xd3\xb5\xf2\xdb\x9d\x29\x57\x69\xe1\x5c\x49\xa4\xb0\x0d\xe1\xe9\xe6\x4d\x48\x65\x5a\x8f\xad\x27\x29\x7e\xcf\xe0\x2d\x56\x5e\x99\x36\xb7\xd8\xc5\xe0\xc4\x9a\xbd\x7e\x09\x8f\x20\xd8\x70\x69\xd7\x45\x6f\x47\xf4\xb5\x91\xff\x2a\x73\xea\x33\x4d\xd8\xd9\xea\xe7\x9d\xad\x72\xdd\xac\xd9\xc4\x09\xae\x76\x33\x8f\x7d\xb3\x3a\x7e\x88\xe3\x49\x23\xb9\x05\x7e\x8c\xf9\xbb\x60\x46\x93\x01\xbf\xed\x8d\xd1\xf8\xc2\x19\x9d\x7e\xa6\xcf\x00\x00\x00\xff\xff\x05\x2a\x44\xf9\x53\x03\x00\x00")

func themesDefaultIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_themesDefaultIndexHtml,
		"themes/default/index.html",
	)
}

func themesDefaultIndexHtml() (*asset, error) {
	bytes, err := themesDefaultIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "themes/default/index.html", size: 851, mode: os.FileMode(420), modTime: time.Unix(1482852945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _themesDefaultStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xcb\x6e\xeb\x36\x10\xdd\xeb\x2b\x06\x08\xba\x09\xcc\x44\xd6\x23\x0f\x66\xd5\x76\xd3\x7d\xbf\x80\x22\x29\x8b\x08\x45\x12\x24\x1d\xcb\x29\xfc\xef\x85\xa8\x87\x69\x49\xf7\x36\x01\x7a\x93\x85\xa5\x11\x67\xe6\xcc\x99\xc3\x99\xc6\xb7\x72\x07\x95\x66\x67\xf8\x27\x01\x68\x89\x3d\x08\x85\x21\x7d\x4b\x00\x0c\x61\x4c\xa8\xc3\xf8\x56\x11\xfa\x7e\xb0\xfa\xa8\x18\x06\xcb\xd9\x5b\x72\x49\x92\xd9\xaf\xd6\xca\x23\x27\x3e\x39\x86\x7d\x61\xba\xb7\xc9\x54\x93\x56\xc8\x33\x86\xbf\xb8\xfc\xe0\x5e\x50\xb2\x83\xdf\xad\x20\x72\x07\x8e\x28\x87\x1c\xb7\xa2\x0e\x91\x48\x08\x43\xb5\xd4\x16\xc3\x5d\x9a\xbe\xbe\xf2\xb2\x8f\xe2\x79\xe7\x11\xe3\x54\x5b\xe2\x85\x56\x18\x94\x56\x3c\x78\x98\x08\x30\xaa\xb4\xf7\xba\x1d\x91\x8e\x36\xaf\x0d\x86\x2c\xed\xd1\x5c\x92\xa4\xd9\xef\xa0\xc9\x76\xd0\xe4\x3b\x68\x8a\x1d\x34\xe5\x0e\x9a\xa7\x65\xd1\xfd\xc1\xfc\x5a\xd1\x89\x8b\x43\xe3\x31\x94\x69\xfa\xb6\xa8\xf2\x69\xa8\x52\x0a\xc5\x51\x33\x1e\xcb\xb2\x29\x59\x48\xb0\x62\x26\x8b\x98\x59\x84\xbe\x89\xb3\x7f\x19\x0e\x86\xe2\xbd\x25\xca\xd5\xda\xb6\x18\x8e\xc6\x70\x4b\x89\x1b\x08\x48\x1e\xef\xe1\x6f\xc1\x78\x45\x6c\x72\xff\xd5\xbf\xc7\xe4\xce\x0d\x3e\x01\x9d\xd1\x4e\x0c\xbc\x92\xca\x69\x79\xf4\x3c\xb4\x3a\x66\x53\xf2\xda\x8f\x8f\x81\xd1\xf0\xf4\x89\x84\x62\xbc\xc3\xf0\x1c\xba\x74\x12\xcc\x37\x18\xb2\x97\x74\x00\x1e\x6b\xe5\xae\x26\x35\xad\xe9\x10\xd7\x32\x6e\x91\x1d\xab\x34\x1d\x38\x2d\x05\x83\xbb\x3a\xad\x8b\xfa\xb9\xaf\x6a\x46\x37\xd2\x37\x29\xe2\x35\x7f\x65\x24\xbf\x55\x65\x68\x2e\x14\x03\xe7\x91\x23\xae\x85\x75\x1e\xd1\x46\x48\x36\x54\x39\xb8\xdc\x2a\x62\x76\x38\xca\x9f\x49\xbf\x4f\xb3\xd9\xeb\x74\x32\x3a\x8f\x9c\x3f\x4b\x7e\xd5\x66\x1c\x5a\x0a\x18\xb4\xbd\x6c\x26\x25\x46\x78\x22\xc5\x67\xa0\x9c\x09\x67\x24\x39\x63\xa8\xa4\xa6\xef\x37\x10\x9e\x4c\x37\x67\x9b\xe8\x28\x68\x59\x96\x24\x50\xdf\x08\xcf\x91\x33\x84\x06\x00\x27\x4b\x4c\x6f\xd6\x1f\xdc\xd6\x52\x9f\x30\x34\x82\x31\xae\x66\x39\x5d\x3f\x70\x29\x85\x71\xc2\x6d\x21\xc6\x4d\x7f\xee\x8a\x3b\xbe\x81\x47\xc5\xb8\xed\xb9\x08\x2a\x7c\xbc\x87\x3f\xe6\x6e\x7f\x4b\x87\x57\x91\x2c\xa4\x58\x8b\xae\x9f\x2f\x0b\x1d\x8e\xaa\x59\x08\x71\x50\x67\xf6\xb2\x1f\xf8\x99\x75\xb9\x0f\x55\x45\x29\x1e\x18\xb1\xef\xdf\xd3\x7c\x99\xfe\xf6\xe3\xc4\x37\x12\xcf\x58\xbe\xcf\x8b\x89\x8f\x3f\xb5\xf2\x5c\xf9\x6f\x91\x41\x07\x9f\x5f\xc0\x44\x16\xcb\x01\x9d\x31\x38\x6a\xb5\x94\x81\x9f\x29\x6b\xb3\x5f\xcf\xbc\x62\x35\xf3\xb2\x62\xe3\x1e\xe4\xd9\xf6\xac\x8a\xe5\x7d\x49\xae\xa9\x1c\xa7\x7d\x6d\x8b\x42\x2d\x97\xc4\x8b\x0f\xbe\x46\xbe\xbe\x18\x6b\x69\x5f\xd6\xe1\x1f\x5a\xee\x1b\xcd\x10\xd5\xe6\x1c\xcf\x00\x0c\xf9\x78\x95\x6a\xa9\x89\xc7\x81\xb6\x68\x84\x8d\x3d\xaf\x74\xd7\x17\x1d\x1c\xc6\xa9\x55\xe9\x2e\x9a\x61\x81\xf7\xed\x09\xf6\x23\x28\xbc\x23\xad\x91\xfc\x7f\x45\x33\xcd\x03\x96\xb2\x82\x3d\xff\x04\x5f\x9e\xe7\x2f\x79\xb5\xd9\x8a\x9b\x71\x19\xf3\xb6\xfb\xda\xd1\xb8\xae\x38\xfb\xb4\x79\xff\x93\x10\x63\x17\xa4\x0c\x73\x7d\x6b\x97\x64\xcf\x59\x95\xb1\x78\x97\x10\x26\x8e\x0e\x43\x19\xad\xd6\x71\xdb\xe6\x1b\x6a\xdd\x3f\x94\xdb\x1b\xf8\x8b\x38\xd7\x94\xac\x4e\x51\xcd\xf8\xcd\xea\x62\x69\xff\x3f\x68\xd9\x8e\x3c\x82\xf4\x76\xbe\x35\x44\x8a\x83\x8a\x7a\x1f\x4f\x74\x63\x39\x9a\x66\xfa\x49\x5b\x86\x2a\xcb\xc9\x3b\x86\xf0\x83\x7a\xcb\xfc\xa5\xf7\x08\xf4\x29\x6d\x5b\x22\x7b\x3b\x6a\xf5\x27\xf2\xa4\x1a\x29\x29\x82\x4d\x2f\x2d\x37\xaf\x97\x7f\x03\x00\x00\xff\xff\x8b\x5d\x38\xf4\x12\x0a\x00\x00")

func themesDefaultStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_themesDefaultStyleCss,
		"themes/default/style.css",
	)
}

func themesDefaultStyleCss() (*asset, error) {
	bytes, err := themesDefaultStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "themes/default/style.css", size: 2578, mode: os.FileMode(420), modTime: time.Unix(1482856933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"themes/default/index.html": themesDefaultIndexHtml,
	"themes/default/style.css": themesDefaultStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"themes": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{themesDefaultIndexHtml, map[string]*bintree{}},
			"style.css": &bintree{themesDefaultStyleCss, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

