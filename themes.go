// Code generated by go-bindata.
// sources:
// themes/default/index.html
// themes/default/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _themesDefaultIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x93\xbf\x0e\xdb\x20\x10\xc6\xf7\x3c\xc5\x89\x66\x6c\x8d\x32\x64\xa9\x30\x4b\x55\xb5\x43\xd5\xa5\xed\x03\x10\x73\x09\xc8\x18\x47\x80\xad\x5a\x91\xdf\xbd\xc2\x38\x32\x76\xfe\x74\xb3\x8f\xbb\xef\xbb\xfb\x1d\x30\x15\x1a\xc3\x77\x00\x4c\xa1\x90\xf1\x03\x80\x05\x1d\x0c\xf2\xdb\x0d\x8a\x9f\xa2\x41\x18\x47\x46\x53\x28\x1d\x1b\x6d\x6b\x70\x68\x4a\xe2\xc3\x60\xd0\x2b\xc4\x40\x40\x39\x3c\xcf\x91\xa2\xf2\x9e\x00\x9d\x64\xe9\x5d\x97\x9d\x5a\x39\xf0\x5d\x92\x90\xba\x07\x2d\x4b\xe2\xb5\xc4\x93\x70\x24\x29\x67\x07\xb1\x0a\x97\x38\x40\xd6\xcd\x3d\x97\x4a\xdd\x3f\x14\x5a\xd1\xeb\x8b\x08\xba\xb5\xeb\x62\x27\xec\x05\x61\x5f\xe3\xf0\x11\xf6\xbd\x30\x1d\xc2\xe7\x12\x8a\x6f\xae\xed\xae\x7e\x11\x9d\xb4\xd4\x31\x0e\x9f\xb2\x8a\xdf\x71\xf2\x89\x81\x3a\xf2\x3c\xab\x33\xf9\xef\xca\x24\x5a\x44\xf9\x59\xe2\x8f\x33\x1b\x8b\x89\x22\x67\x62\xa6\xf6\x61\xb2\x2b\xbe\x3b\x3c\xc3\x38\x92\xe4\x9e\x39\x0b\xce\xa8\xd1\x0f\x76\x68\xe5\xa6\x73\x9a\x37\xb5\xcd\xc8\x80\xcd\x9f\xeb\x65\x9c\x44\x55\x5f\x5c\xdb\x59\xb9\xde\x47\x65\x84\xf7\x25\x91\xc2\xd5\x84\xff\x4f\xa4\x6a\x6d\x40\x1b\xc8\x1c\x7f\xc7\xfe\x17\x56\x71\x4f\x2b\x34\xcc\xa7\xe0\xa4\xb5\x2c\xe1\x47\xbc\x72\x91\x4c\x3e\x6c\xd6\x5b\x83\x41\xb5\xf2\x53\xd5\x5e\x07\xb2\xc6\xc4\xd4\xe1\xf9\x32\x0f\x0f\x38\xe7\x9c\x2f\x69\x82\x2d\xd9\xec\xb2\xbd\x70\xc7\xbf\xa2\xb9\x1a\x24\xaf\x84\xbf\xa6\xf3\xb7\xc2\x8c\xce\x00\xf8\xee\xd9\x12\x17\xe4\x8c\xa6\xf7\xc4\xe8\xf4\x82\xff\x05\x00\x00\xff\xff\x2f\x48\xc8\xc8\xc8\x03\x00\x00")

func themesDefaultIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_themesDefaultIndexHtml,
		"themes/default/index.html",
	)
}

func themesDefaultIndexHtml() (*asset, error) {
	bytes, err := themesDefaultIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "themes/default/index.html", size: 968, mode: os.FileMode(420), modTime: time.Unix(1482861642, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _themesDefaultStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x4d\x6e\xf3\x36\x10\xdd\xeb\x14\x03\x04\xdd\x04\x56\x22\x4b\x72\x12\x33\xab\xb6\x9b\xee\x7b\x02\x4a\x1c\x59\x44\x28\x92\x20\xe9\xd8\x4e\xe1\xbb\x17\xa2\xfe\x28\x4b\x49\x13\xa0\x5f\xb2\xb0\x35\x22\xe7\xe7\xcd\x9b\x37\xae\x5d\x23\x36\x50\x28\x76\x81\x7f\x22\x80\x86\x9a\x03\x97\x04\x92\xd7\x08\x40\x53\xc6\xb8\x3c\xf8\xa7\x6b\x14\x8d\x87\x2a\x25\x5d\x6c\xf9\x07\x12\xd8\xe6\xfa\xfc\x3a\x98\x2a\xda\x70\x71\x21\xf0\x17\x8a\x77\x74\xbc\xa4\x1b\xf8\xdd\x70\x2a\x36\x60\xa9\xb4\xb1\x45\xc3\x2b\xef\x89\x7a\x37\xa5\x12\xca\x10\xb8\x4b\x92\xfd\x1e\x77\xad\x17\x87\x67\x17\x33\x2c\x95\xa1\x8e\x2b\x49\x40\x2a\x89\xfe\x86\x0e\xb2\x8b\x0b\xe5\x9c\x6a\xfa\x24\x7b\x9b\x53\x9a\x40\x9a\xb4\xd9\x5c\xa3\xa8\xde\x6e\xa0\x4e\x37\x50\x67\x1b\xa8\xf3\x0d\xd4\xbb\x0d\xd4\x4f\xb7\x15\xb6\x07\xb3\xa9\xa2\x13\xf2\x43\xed\x08\xec\x92\xe4\xf5\xa6\xca\xa7\xae\x4a\xc1\x25\xc6\x75\x7f\x2c\x4d\x87\x60\x3e\xc0\x02\x99\x34\x40\xe6\xc6\xf5\xcc\xcf\xf6\xa5\x3b\xe8\x8b\x77\x86\x4a\x5b\x29\xd3\x10\x38\x6a\x8d\xa6\xa4\xb6\x03\x20\x7a\xbc\x87\xbf\x39\xc3\x82\x9a\xe8\xfe\xbb\x7f\x8f\xd1\x9d\xed\xee\xf8\xec\xb4\xb2\xbc\xc3\x95\x16\x56\x89\xa3\xc3\x36\xee\x0c\x4d\x81\x95\xeb\xbf\x7a\x44\xfd\xb7\x8f\x98\x4b\x86\x67\x02\xcf\xbe\x4b\x27\xce\x5c\x4d\x20\x7d\x49\xba\xc4\x0b\x5a\xbe\x1d\x8c\x3a\x4a\x46\xe0\xae\xa2\x55\x59\x95\x9d\x5f\xc3\xd0\xc4\xa6\xaf\x52\x9f\xc1\x2a\xc1\x19\xdc\x55\x49\x95\x57\xcf\x6d\x55\x63\x76\x77\x35\x52\x86\x5d\x96\x85\x3a\xb7\x10\x7a\xe2\xf5\x3e\x0a\xe5\x03\x0d\x88\xe5\xfb\x3e\xf0\xf0\xb6\x2b\x60\x25\xc4\x0d\xd4\xc3\xc5\x89\xd8\xfa\xdc\x93\x66\xd6\xbb\xc1\xf4\x45\x4b\x00\x4e\x35\x77\x18\x5b\x4d\x4b\x6c\x89\x7a\x32\x54\xb7\x66\xf5\x8e\xa6\x12\xea\x44\xa0\xe6\x8c\xa1\x1c\xfd\x4c\x2f\x50\x08\xae\x2d\xb7\x73\x08\x24\x7d\xe7\x07\xcf\xfb\x1e\x86\xf5\xb6\xac\x37\xb1\x47\x79\x6a\xdc\x50\xea\x14\xd5\x96\x46\x09\x31\x8b\xd9\xb3\x76\x18\xc4\x7d\xb6\x67\x34\x9b\x03\xe4\xb1\x80\xbc\xa3\x7a\x70\x91\x54\xdc\x58\x17\x97\x35\x17\xac\x23\x57\x77\x65\x3e\x88\xe3\x85\xa3\xf8\x4a\x5e\xda\x30\xab\x23\x96\x0c\x46\xeb\x62\xeb\x2e\x02\x27\x49\x08\x5d\x0b\x0e\x9d\xa4\xdc\x36\xac\xa4\x9a\x3b\x2a\xf8\x87\x07\x89\x71\xab\x05\xbd\x10\x28\x84\x2a\xdf\x66\x29\x3c\x05\x44\x18\xe0\xc8\xcb\xdd\x6e\x47\x7f\x41\xab\xfb\x8c\x49\xdd\x9e\x9b\xf2\x0e\x85\xef\x28\x19\x9a\x16\x0b\x3f\xfc\x8f\xf7\xf0\xc7\x38\x64\x3f\x1a\xff\x69\x36\x6f\x14\xa0\xe2\x67\x64\x8b\xf1\x5f\xd0\x28\x60\x5f\xfa\xb2\xed\xf0\x19\xe5\x60\xeb\xab\x0a\x42\x3c\x30\x6a\xde\x7e\x26\x35\xbb\xe4\xb7\xcf\x03\xcf\x94\x25\x65\xd9\x36\xcb\x07\x3c\xfe\x54\xd2\xa1\x74\x3f\x02\xa3\xec\xee\xfc\x02\x24\xd2\x90\x0e\xf1\x65\x36\x6c\x43\xd4\x7a\xbb\x5c\x35\xf9\x62\xd5\xa4\xf9\xca\x1c\x64\xe9\xba\x1e\x85\xf4\xbe\x46\x53\x28\x8b\xe5\xa8\x23\x53\xa1\x06\x05\x75\xfc\x1d\x97\x99\x2f\x07\x63\x49\xed\xeb\xd2\xfd\x43\x83\xae\x56\x2c\x2e\x95\xbe\x84\x1a\x40\x20\x1b\x34\x55\x28\xea\x88\x87\x2d\xd8\x1c\x7d\xcf\x3f\x17\xfa\xfe\xc9\xe3\xbe\xbe\x38\x3e\x4b\x05\xcf\xb4\xd1\x02\xff\xd7\x6c\x06\x3d\x60\x09\xcb\xd9\xf3\x17\xf9\x65\x59\xf6\x92\x15\xab\xad\x98\xc9\x65\x88\xdb\xe6\x7b\x47\xc3\xba\xc2\xe8\xc3\x0f\x9e\xff\x04\x44\x9b\x1b\x50\x3a\x5d\x5f\x5b\xe1\xe9\x73\x5a\xa4\x2c\x5c\xe1\x94\xf1\xa3\x25\xb0\x5b\x2c\xca\x6d\xb6\xc2\xd6\xed\xc3\x6e\xfd\x87\xcf\x37\xf3\x5c\x42\xb2\x38\x55\x2a\x86\xb3\xd5\xc5\x92\xf6\xbf\xe3\xb2\xe9\x71\x04\xe1\xcc\x38\x35\x54\xf0\x83\x0c\x7a\x1f\x2a\xba\x36\x18\x0f\x9a\x7e\x52\x86\xc5\x85\x41\xfa\x46\xc0\x7f\xc4\xad\x65\x7c\xd3\xde\xf0\xf0\x49\x65\x1a\x2a\x5a\x7b\xdc\xa8\x8f\xd8\xd1\xa2\x87\x24\xf7\x36\x75\x6b\x99\x3d\x5e\xff\x0d\x00\x00\xff\xff\x0e\x07\x1c\xb6\x76\x0b\x00\x00")

func themesDefaultStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_themesDefaultStyleCss,
		"themes/default/style.css",
	)
}

func themesDefaultStyleCss() (*asset, error) {
	bytes, err := themesDefaultStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "themes/default/style.css", size: 2934, mode: os.FileMode(420), modTime: time.Unix(1482861612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"themes/default/index.html": themesDefaultIndexHtml,
	"themes/default/style.css": themesDefaultStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"themes": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{themesDefaultIndexHtml, map[string]*bintree{}},
			"style.css": &bintree{themesDefaultStyleCss, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

